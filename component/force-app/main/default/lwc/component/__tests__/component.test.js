import { createElement } from 'lwc';
import Component from 'c/component';

describe('c-component', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('TODO: test case generated by CLI command, please fill in test logic', () => {
        // Arrange
        const element = createElement('c-component', {
            is: Component
        });

        // Act
        document.body.appendChild(element);

        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });

    it('should load more accounts when "Load more" button is clicked', () => {
        // Arrange
        const component = new AccountTable();
      
        // Act
        component.loadMoreAccounts();
      
        // Assert
        expect(component.accounts.length).toBeGreaterThan(0);
      });

      it('should open modal when "Create Account" button is clicked', () => {
        // Arrange
        const component = new AccountTable();
      
        // Act
        component.openModal();
      
        // Assert
        expect(component.showModal).toBe(true);
      });

      it('should close modal when "Cancel" button is clicked', () => {
        // Arrange
        const component = new AccountTable();
        component.showModal = true;
      
        // Act
        component.closeModal();
      
        // Assert
        expect(component.showModal).toBe(false);
      });

      it('should save account when "Save" button is clicked', () => {
        // Arrange
        const component = new AccountTable();
        component.name = 'Test Account';
        component.type = 'Test Type';
      
        // Act
        component.saveAccount();
      
        // Assert
        expect(component.accounts).toContainEqual({ name: 'Test Account', type: 'Test Type' });
      });

      it('should search accounts when search input is changed', () => {
        // Arrange
        const component = new AccountTable();
        const searchTerm = 'Test';
        const mockEvent = { target: { value: searchTerm } };
      
        // Act
        component.handleSearchInput(mockEvent);
      
        // Assert
        expect(component.accounts).toEqual(
          expect.arrayContaining([
            { id: 1, name: 'Account 1', type: 'Type 1', owner: 'Owner 1', createdDate: '01/01/2021' },
            { id: 2, name: 'Account 2', type: 'Type 2', owner: 'Owner 2', createdDate: '01/02/2021' },
          ])
        );
      });

      
      it('should update name when name input is changed', () => {
        // Arrange
        const component = new AccountTable();
        const name = 'Test Account';
        const mockEvent = { target: { value: name } };
      
        // Act
        component.handleNameChange(mockEvent);
      
        // Assert
        expect(component.name).toBe(name);
      });

      it('should update type when type input is changed', () => {
        // Arrange
        const component = new AccountTable();
        const type = 'Test Type';
        const mockEvent = { target: { value: type } };
      
        // Act
        component.handleTypeChange(mockEvent);
      
        // Assert
        expect(component.type).toBe(type);
      });
      
            
});